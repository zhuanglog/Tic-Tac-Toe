class Square extends React.Component {
  render() {
    return (
      <button className="square" onClick={() => this.props.onClick()}>
        {this.props.value}
      </button>
    );
  }
}

class Board extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      board: Array(9).fill(null),
    };
  }
  
  handleClick(i){
  const board = this.state.board.slice();
  if (winning(board,aiPlayer) ||winning(board,huPlayer)||board[i]) {
      this.setState({
       board:Array(9).fill(null) 
      });
      return;
    }
  board[i] = "X";
  const bestspot = minimax(board,aiPlayer).index;
  board[bestspot]="O";
  this.setState({
    board:board,
  });    
 }
  
  renderSquare(i) {
    return <Square 
             value={this.state.board[i]}
             onClick={() => this.handleClick(i)}
          />;
  }

  render() {
    let status = '';
    if (winning(this.state.board,aiPlayer)) {
      status = 'Winner: Computer';
    } else if (winning(this.state.board,huPlayer)){
      status =  'You Win!';
    }
    else {
      status = "I never loss£¡";
    }
     
    return (
      <div className="tic">
        <div className="status">{status}</div>
        <div className="board-row">
          {this.renderSquare(0)}
          {this.renderSquare(1)}
          {this.renderSquare(2)}
        </div>
        <div className="board-row">
          {this.renderSquare(3)}
          {this.renderSquare(4)}
          {this.renderSquare(5)}
        </div>
        <div className="board-row">
          {this.renderSquare(6)}
          {this.renderSquare(7)}
          {this.renderSquare(8)}
        </div>
      </div>
    );
  }
}

class Game extends React.Component {
  render() {
    return (
      <div className="game">
        <div className="game-board">
          <Board />
        </div>
        <div className="game-info">
          <div></div>
          <ol>{/* TODO */}</ol>
        </div>
      </div>
    );
  }
}

// human
var huPlayer = "X";
// ai
var aiPlayer = "O";
//keeps count of function calls
var fc = 0;

function minimax(newBoard, player){
  //add one to function calls
  fc++;  
  //available spots
  var availSpots = emptyIndexies(newBoard);
  // checks for the terminal states such as win, lose, and tie and returning a value accordingly
  if (winning(newBoard, huPlayer)){
     return {score:-10};
  }
	else if (winning(newBoard, aiPlayer)){
    return {score:10};
	}
  else if (availSpots.length === 0){
  	return {score:0};
  }
// an array to collect all the objects
  var moves = [];
  // loop through available spots
  for (var i = 0; i < availSpots.length; i++){
    //create an object for each and store the index of that spot that was stored as a number in the object's index key
    var move = {};
  	 move.index = availSpots[i];
    // set the empty spot to the current player
    newBoard[availSpots[i]] = player;
    //if collect the score resulted from calling minimax on the opponent of the current player
    if (player == aiPlayer){
      var result = minimax(newBoard, huPlayer);
      move.score = result.score;
    }
    else{
      var result = minimax(newBoard, aiPlayer);
      move.score = result.score;
    }
    //reset the spot to empty
    newBoard[availSpots[i]] = null;
    
    // push the object to the array
    moves.push(move);
  }
// if it is the computer's turn loop over the moves and choose the move with the highest score
  var bestMove;
  if(player === aiPlayer){
    var bestScore = -10000;
    for(var i = 0; i < moves.length; i++){
      if(moves[i].score > bestScore){
        bestScore = moves[i].score;
        bestMove = i;
      }
    }
  }else{
// else loop over the moves and choose the move with the lowest score
    var bestScore = 10000;
    for(var i = 0; i < moves.length; i++){
      if(moves[i].score < bestScore){
        bestScore = moves[i].score;
        bestMove = i;
      }
    }
  }
// return the chosen move (object) from the array to the higher depth
  return moves[bestMove];
}

// returns the available spots on the board
function emptyIndexies(board){
  const availSpots = [];
  for (var i=0;i<board.length;i++){
    if (board[i]!= "X"&&board[i]!="O"){
      availSpots.push(i);
    }
  }
  return availSpots;
}

// winning combinations using the board indexies for instace the first win could be 3 xes in a row
function winning(board, player){
 if (
        (board[0] == player && board[1] == player && board[2] == player) ||
        (board[3] == player && board[4] == player && board[5] == player) ||
        (board[6] == player && board[7] == player && board[8] == player) ||
        (board[0] == player && board[3] == player && board[6] == player) ||
        (board[1] == player && board[4] == player && board[7] == player) ||
        (board[2] == player && board[5] == player && board[8] == player) ||
        (board[0] == player && board[4] == player && board[8] == player) ||
        (board[2] == player && board[4] == player && board[6] == player)
        ) {
        return true;
    } else {
        return false;
    }
}

// ========================================

ReactDOM.render(
  <Game />,
  document.getElementById('root')
);